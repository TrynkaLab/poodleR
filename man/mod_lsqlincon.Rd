% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/estimate_weights.R
\name{mod_lsqlincon}
\alias{mod_lsqlincon}
\title{Modify Least Squares Regression to Handle Non-Positive Definite Matrices}
\usage{
mod_lsqlincon(
  C,
  d,
  A = NULL,
  b = NULL,
  Aeq = NULL,
  beq = NULL,
  lb = NULL,
  ub = NULL
)
}
\arguments{
\item{C}{A numeric vector or matrix representing the coefficient matrix of the least squares problem.
If a vector, it is converted to a matrix.}

\item{d}{A numeric vector representing the right-hand side of the equation.}

\item{A}{(Optional) A numeric matrix representing inequality constraints (size m x n).}

\item{b}{(Optional) A numeric vector representing inequality constraint thresholds (length m).}

\item{Aeq}{(Optional) A numeric matrix representing equality constraints (size 1 x n).}

\item{beq}{(Optional) A numeric vector representing equality constraint thresholds (length 1).}

\item{lb}{(Optional) A numeric vector specifying lower bounds for variables (length n).}

\item{ub}{(Optional) A numeric vector specifying upper bounds for variables (length n).}
}
\value{
A numeric vector of length \code{n}, representing the solution to the constrained least squares problem.
}
\description{
This function extends standard least squares regression to handle cases where
the quadratic programming matrix \code{Dmat} is not positive definite.
}
\details{
The quadprog package requires \code{Dmat} to be positive definite for \code{solve.QP()}, but in cases where
the number of variants (m) is smaller than the number of donors (n), \code{Dmat} may not meet this requirement.
This function detects such cases and applies a near-positive definite approximation using \code{Matrix::nearPD()}
to ensure stability.
\itemize{
\item Ensures that all input matrices and vectors have valid dimensions.
\item If \code{Dmat} (computed as \code{t(C) \%*\% C}) is not positive definite, it is replaced with its nearest positive definite approximation.
\item Uses \code{quadprog::solve.QP()} to solve the quadratic programming problem.
\item Inequality constraints \code{A * x <= b} and equality constraints \code{Aeq * x = beq} are enforced if provided.
\item Implements lower and upper bound constraints as additional linear inequalities.
}
}
\examples{
\dontrun{
C <- matrix(c(1, 2, 3, 4), nrow = 2)
d <- c(5, 6)
A <- matrix(c(1, 1, -1, 0), nrow = 2)
b <- c(1, -2)
result <- mod_lsqlincon(C, d, A, b)
}

}
